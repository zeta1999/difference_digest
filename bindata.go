// Code generated by go-bindata.
// sources:
// difference_digest.sql
// DO NOT EDIT!

package difference_digest

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _difference_digestSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x94\xd1\x6f\xda\x30\x10\xc6\xdf\xf3\x57\x7c\xea\xd8\x94\x74\xd1\x64\xc7\x89\x13\x77\x4a\xa5\x8c\x65\x08\x29\x0d\x1d\x84\x87\xa9\x6a\x11\x6d\xd3\x10\x0d\x0c\x0a\x61\xcb\xf6\xd7\x4f\x4e\x02\x6d\x07\x5d\xd7\x69\xbc\x60\x1f\xe7\xbb\xef\x7e\xdf\x89\xee\x30\x0c\x92\x10\x83\x21\x86\xe1\x79\x14\x74\x43\x7c\x1a\xc7\xdd\xa4\x3f\x88\xb1\xca\x26\x65\xba\x58\xbd\xbb\x9b\xcc\xa6\xeb\x99\x9e\xdf\x56\xc8\x65\x69\x22\x9d\xa7\x8b\x54\x96\xb8\xce\xb3\x5c\x96\x06\x86\x61\x32\x1e\xc6\x23\xc8\xcd\x22\x2d\xf2\x1b\x0d\xc0\x2e\x16\x8f\xa3\x08\x83\xb8\xf9\xee\xc7\xe7\xe3\xa4\xfe\xb9\x7f\x76\x36\x4e\x82\x0f\x51\x58\xdf\xa2\x20\xee\x8d\x83\x5e\x88\xd5\x7c\xf5\xa3\x9c\x2d\xe5\x46\x0b\x46\xe8\x74\x34\x40\x75\x1e\xa5\xe9\xed\x1a\x3e\x2e\xa8\x67\x71\x21\x3c\x21\xb8\xc5\x1c\xea\x71\xc1\x88\x6b\x42\x50\x9b\x09\x42\x19\x15\x9c\x11\x4f\x70\x87\x50\x13\x16\x71\x2d\x97\xdb\x16\x67\x82\x11\xc1\x2d\xca\x85\x09\x9b\xba\x96\xc5\x6d\x8f\x09\x2a\x08\x61\xae\x10\x26\x28\xb7\x3d\x47\x30\x87\x72\x66\x09\x6e\x53\x46\x2c\x7a\xa9\x01\x8b\xe9\xfa\x2b\x7c\x35\xb0\x7e\x44\x2a\xe7\xb7\xcf\x91\x7a\x68\x68\x1a\x90\x4b\x99\x16\xf0\xa1\xd7\x0f\x8e\xa1\x6f\xe9\x5c\xdd\x1f\x4f\x4f\xc1\x2c\xc3\x30\xf0\x1a\xd4\xb3\x6d\xee\xda\x36\x71\x99\x4b\x84\xe3\x50\x4e\xb9\x06\x14\x69\xb9\x29\x24\xf4\xdd\xb8\x17\xf9\x6d\x75\x89\xe3\xa6\xfc\x93\x0f\x3b\x9d\xf7\xd0\xb4\xbf\xb2\xb0\x2c\xa6\xf9\x3c\x97\xd9\xe4\x67\x5a\x2c\xd7\x3b\x69\xad\x67\xf7\x26\xe6\xb2\xfc\xaf\x06\x56\x2d\xc4\xb6\xa1\xa1\x01\x37\xcb\x8d\x2c\xe1\x83\x28\x7c\x77\x2a\xc3\x07\x39\xa9\x0b\xb5\x1c\xea\x0c\x45\xf7\xfb\x2c\x9f\xa7\xd0\xf5\x0a\x6f\x40\x8d\x3a\xd1\x38\x41\x9d\xda\x94\xae\x14\x5c\xda\x06\x9a\xc2\x6f\xfd\x5d\x40\x7b\x5c\x11\x2f\x01\x76\x9d\x97\x93\x6a\x59\x4c\xd6\x77\x1b\x79\xa3\x4f\xb3\xac\xdd\x77\x13\xdf\xa6\xf3\x4d\xba\xb7\xfd\xcd\x5d\x7b\x86\xdc\x43\x6e\x3b\x6a\xa3\xcf\x51\xcb\x6b\x14\x46\x61\x37\x81\xea\xf6\xaa\xe9\xa3\x24\x1f\x52\x1c\xf4\x7a\xc3\xb0\xa7\x82\x7b\x92\xa1\x6f\xb5\xe9\x35\x87\x91\x9a\x0e\xfe\x53\xb3\x99\x4d\x52\xf2\xe5\x3c\x84\xbf\x1d\xb2\x31\x39\xee\x27\xdd\x41\xfc\xb1\xf6\xca\x38\x28\xe3\x0f\xe0\xda\xd5\x7a\x00\xb0\x8d\x6c\x09\xee\xed\xde\xfd\x1f\xc8\xcb\x19\xee\x6f\x5e\xeb\xbc\x5a\xbe\x69\x96\x19\xb8\xaa\x8f\x75\x6b\xe3\x1f\xa8\x6e\xe7\x81\xbe\xd3\xfd\x1c\xde\x47\x04\x1e\x63\xde\xa2\x38\xc8\xf9\x57\x00\x00\x00\xff\xff\xeb\x11\x94\x2f\x94\x05\x00\x00")

func difference_digestSqlBytes() ([]byte, error) {
	return bindataRead(
		_difference_digestSql,
		"difference_digest.sql",
	)
}

func difference_digestSql() (*asset, error) {
	bytes, err := difference_digestSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "difference_digest.sql", size: 1428, mode: os.FileMode(420), modTime: time.Unix(1599431934, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"difference_digest.sql": difference_digestSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"difference_digest.sql": &bintree{difference_digestSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

