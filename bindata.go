// Code generated by go-bindata.
// sources:
// udfs/postgres.sql
// udfs/snowflake.sql
// DO NOT EDIT!

package difference_digest

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _udfsPostgresSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x94\x6d\x6f\x9b\x3a\x14\xc7\xdf\xf3\x29\xfe\xea\xcd\xbd\x82\xde\x68\xb2\x31\x18\xdc\x8a\x4a\x2c\x73\xa3\x48\x94\x74\x81\x48\x9d\xaa\x36\x4a\x5b\x4a\xd0\x12\x12\x11\xb2\xb1\x7d\xfa\x89\xc7\xb4\xcb\xaa\xb6\xd2\xf2\x26\xf6\xe1\x3c\xfd\x7f\xe7\xc8\x83\x89\x74\x43\x09\x79\x15\x4a\x3f\x18\x8d\x7d\x8c\xce\xe1\x8f\x43\xc8\xab\x51\x10\x06\xd8\x2c\x37\x3f\xf2\xc5\x3a\xdd\x9d\x2a\x4a\xe3\x3a\x9e\x60\x22\x2f\x3d\x77\x20\x71\x3e\xf5\x07\x61\x19\xb4\x89\x67\x79\xb4\xda\x7c\x78\x9c\x2d\xe6\xdb\x85\x9a\x3c\x14\x48\xd2\xbc\x8f\x68\x19\xad\xa2\x34\xc7\x5d\x12\x27\x69\xae\x61\x22\xc3\xe9\xc4\x0f\x90\xee\x56\x51\x96\xdc\x2b\x00\x3a\x9b\x3f\xf5\x3c\x8c\xfd\xfa\x7f\xe4\x5f\x4e\xc3\xea\xf3\xe8\xe2\x62\x1a\xba\x1f\x3d\x59\xdd\x3c\xd7\x1f\x4e\xdd\xa1\xdc\x37\xa6\xb8\x01\x7a\x3d\x05\x28\x2b\x07\x51\xf4\xb0\x85\x83\x6b\x6a\xeb\x5c\x08\x5b\x08\xae\x33\x93\xda\x5c\x30\x62\xf5\x21\xa8\xc1\x04\xa1\x8c\x0a\xce\x88\x2d\xb8\x49\x68\x1f\x3a\xb1\x74\x8b\x1b\x3a\x67\x82\x11\xc1\x75\xca\x45\x1f\x06\xb5\x74\x9d\x1b\x36\x13\x54\x10\xc2\x2c\x21\xfa\xa0\xdc\xb0\x4d\xc1\x4c\xca\x99\x2e\xb8\x41\x19\xd1\xe9\x8d\x02\xac\xe6\xdb\xaf\x70\x4a\xc1\xea\x11\x29\xcc\xdf\x7e\x47\x65\xa0\xa6\x28\x40\x92\xa6\x51\x06\x07\x6a\x15\x70\x0c\xb5\xa5\x73\xbb\x3f\x9e\x9d\x81\xe9\x9a\xa6\xe1\x5f\x50\xdb\x30\xb8\x65\x18\xc4\x62\x16\x11\xa6\x49\x39\xe5\x0a\x90\x45\xf9\x2e\x4b\xa1\x76\x72\xaf\x93\x87\xe2\x06\xc7\x75\xfa\x17\x03\x7b\xbd\x53\xbc\x71\x84\x79\x36\x4f\x96\x49\x1a\xcf\x7e\x46\xd9\x7a\xdb\xb5\xd6\xcc\x6c\x3f\xc4\x24\xcd\xff\xea\x00\x8b\x06\x62\x53\x50\x53\x80\xfb\xf5\x2e\xcd\xe1\x80\x94\xf8\x1e\x4b\x0f\x07\xe4\xa4\x4a\xd4\x70\xa8\x3c\x4a\xba\xdf\x17\xc9\x32\x82\xaa\x16\xf8\x0f\x54\xab\x1c\xb5\x13\x54\xae\x75\xea\xa2\x84\x4b\x1b\x43\x9d\xf8\x7f\xa7\x33\x28\xcf\x33\xe2\x3d\xc0\xee\x92\x7c\x56\xac\xb3\xd9\xf6\x71\x97\xde\xab\xf3\x38\x6e\xf6\xbd\x8f\x6f\xf3\xe5\x2e\x3a\xd8\xfe\xfa\xae\xbc\x42\xee\x29\xb7\x8e\x5a\xf0\xd9\x6b\x78\x05\xd2\x93\x83\x10\x65\xb5\x7f\xea\x3a\x65\xcb\x5d\xc7\xee\x70\x38\x91\xc3\xf2\x74\xd0\x27\xd4\xb6\x21\xb5\x12\x1f\x94\x92\xe0\xbc\x24\xa8\x5f\x3b\x85\x5f\x2e\x25\x9c\x56\x59\x3d\x59\x7f\x14\x0e\xc6\xfe\xa7\x6a\x40\xda\x5b\x5f\x88\x36\x79\xb3\x4f\x4f\xa8\x35\x96\x16\xdb\xc1\xc2\xed\x5f\x8d\xf7\x83\x3b\x5c\xb7\x66\xdc\xe5\xc6\xcd\xe3\x58\xc3\x6d\x75\xac\x4a\x6b\x6f\x45\xd9\x8a\x80\xda\x35\xfb\x1a\xd3\x67\xb2\x9f\xb3\x6d\xf5\xff\x11\xee\xaf\x00\x00\x00\xff\xff\x7b\x6a\xe7\xa4\xa9\x05\x00\x00")

func udfsPostgresSqlBytes() ([]byte, error) {
	return bindataRead(
		_udfsPostgresSql,
		"udfs/postgres.sql",
	)
}

func udfsPostgresSql() (*asset, error) {
	bytes, err := udfsPostgresSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "udfs/postgres.sql", size: 1449, mode: os.FileMode(420), modTime: time.Unix(1599532856, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _udfsSnowflakeSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\x5d\x6b\xdb\x4c\x10\x85\xaf\xdf\xfd\x15\x07\x93\xb7\x91\x1a\x5f\xec\x97\x56\x1a\x8c\x0d\x6b\x7b\x6d\x6f\x91\x25\x23\xad\xfb\x75\x63\xda\xc6\xa5\x86\xd4\x85\xe0\xd0\x40\xe9\x7f\x2f\x92\x6c\x43\x71\x42\x73\x37\x3b\x3c\x67\x67\xce\x99\x49\xe5\x6c\x70\x28\x2b\x54\x6e\x95\xdb\x89\xc3\x6c\x5d\x4c\x82\x2f\x0b\xcc\x36\xd3\xe9\xc6\xe8\xb1\x0f\x9b\xe5\x3a\x0f\x7e\x95\x7f\x88\x3e\x61\xec\xe7\xbe\x08\x7d\x7c\x3e\x56\x31\xfb\xaf\x72\x61\x5d\x15\xf5\xb1\xc1\x00\x5b\x83\x5d\x5d\x31\x20\x8a\xc6\x3e\xd4\x0b\x3f\x0b\xb9\x9b\x85\xf3\xa3\xf2\xf3\x45\x88\x6c\x1f\x4a\xc6\x78\x8d\x71\x57\xfc\x0f\x91\x69\x6d\x52\xad\x79\xaa\x52\x4e\x49\x22\x8c\x30\x31\x6e\xd0\x08\x6d\x31\x6d\x14\x5a\x92\x26\x93\x4a\x4a\xd0\x4a\xe3\xe7\x74\xcd\x02\x83\x01\xfb\x97\xbf\x85\xad\x17\x51\x6f\x77\xfb\xd8\x43\x6b\xab\xb7\xbd\xdb\x7e\xdf\xee\x0f\xbd\x97\xd8\x0b\xe5\xa6\x58\x2f\xc7\xae\x8a\x9e\xca\x8a\x01\x40\x64\x84\xce\x48\x68\x43\x42\x2a\x93\x88\x54\xf2\xa4\xd9\xdb\x87\xf7\x65\x15\x1d\x87\xf5\xf1\x77\x32\xe7\xb6\x92\xcf\xfa\x8b\xfb\x68\x07\x4c\x6c\xed\xda\x02\x78\xb7\x70\x05\x76\xb7\x8f\x18\x82\x23\x34\x0f\x91\x49\x43\x94\x11\x19\xa9\x12\x91\x19\x52\x3c\xbd\x84\x45\x07\x93\xd0\x8a\xb8\x50\x82\x8c\xe2\x19\x99\x84\x8b\x4b\x56\x76\xac\xe4\xa9\x4c\x8d\x96\x46\x91\xe2\x64\xa4\x30\x74\xc9\xaa\x8e\xd5\x22\x95\xd2\xe8\x4c\x91\x20\xce\x55\x4a\x4f\xa0\xfa\xb8\xaf\xd1\x59\x42\x2a\x11\x46\x49\x32\x5a\x28\x2e\xbb\x1d\x5c\x31\x8d\xe3\x17\x9e\x34\x54\xd6\xe7\xbe\x98\x6f\x3e\xba\xaa\xac\x4f\x61\x62\x96\x97\x36\xc4\x0c\x38\xdd\xb3\x6d\x30\x20\xb7\xc5\x7c\x6d\xe7\x0e\x6f\xec\x5b\x5b\x4f\x2a\xbf\x3a\x1d\xf9\x9a\x01\xbb\xaf\x91\xcb\xdd\xd2\x15\x01\xc3\x21\x78\x8c\xfb\xed\xe1\xe1\x7e\x0f\xce\x80\x2f\x3f\x1e\xf6\x87\x26\x6d\x06\xfc\xfc\xb6\xbb\xdb\x46\x67\xf6\x15\x44\x7c\x14\xfc\xea\x1c\x9c\x3e\x39\x57\xa3\xd1\x08\x9d\xbb\xee\x9f\x9b\x1b\x06\xfc\x66\x38\x4d\x68\xbb\xec\x7a\xf0\x27\x00\x00\xff\xff\xc7\x07\xc3\xa8\xa3\x03\x00\x00")

func udfsSnowflakeSqlBytes() ([]byte, error) {
	return bindataRead(
		_udfsSnowflakeSql,
		"udfs/snowflake.sql",
	)
}

func udfsSnowflakeSql() (*asset, error) {
	bytes, err := udfsSnowflakeSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "udfs/snowflake.sql", size: 931, mode: os.FileMode(420), modTime: time.Unix(1599532516, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"udfs/postgres.sql": udfsPostgresSql,
	"udfs/snowflake.sql": udfsSnowflakeSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"udfs": &bintree{nil, map[string]*bintree{
		"postgres.sql": &bintree{udfsPostgresSql, map[string]*bintree{}},
		"snowflake.sql": &bintree{udfsSnowflakeSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

